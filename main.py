
from __future__ import annotations

import os
import asyncio
import secrets
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode

from dotenv import load_dotenv

from db import init_db, get_conn
from keyboards import rating_kb, skip_comment_kb

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
MANAGERS_CHAT_ID = int(os.getenv("MANAGERS_CHAT_ID", "0"))
PROMO_VALID_DAYS = int(os.getenv("PROMO_VALID_DAYS", "30"))
DB_PATH = os.getenv("DB_PATH", "./bot.db")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is empty: —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# --- FSM ---
class FeedbackSG(StatesGroup):
    waiting_rating = State()
    waiting_comment = State()

# --- Utils ---
def gen_promo_code(n: int = 8) -> str:
    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    return "".join(secrets.choice(alphabet) for _ in range(n))

async def send_manager_card(user: Message | CallbackQuery, rating: int, comment: str, promo_code: str, expires_at: datetime):
    uid = user.from_user.id
    uname = user.from_user.username or "-"
    text = (f"<b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n"
            f"–ì–æ—Å—Ç—å: <code>{uid}</code> (@{uname})\n"
            f"–û—Ü–µ–Ω–∫–∞: <b>{rating} ‚≠êÔ∏è</b>\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '‚Äî'}\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expires_at.strftime('%Y-%m-%d')}</b>")
    if MANAGERS_CHAT_ID != 0:
        await bot.send_message(MANAGERS_CHAT_ID, text)

# --- Handlers ---
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ¬´–†–∏–±–∞–º–±–µ–ª—å¬ª.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ ‚≠êÔ∏è –æ—Ç 1 –¥–æ 5:",
        reply_markup=rating_kb()
    )
    await state.set_state(FeedbackSG.waiting_rating)

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–Ø —Å–æ–±–∏—Ä–∞—é –æ—Ü–µ–Ω–∫—É –∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ—ë –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"
    )

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    # –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π
    since = (datetime.utcnow() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    from statistics import mean
    try:
        from db import get_conn
        with get_conn(DB_PATH) as conn:
            cur = conn.cursor()
            cur.execute("SELECT rating FROM feedback WHERE created_at >= ?", (since,))
            rows = cur.fetchall()
        count = len(rows)
        avg = round(mean([r[0] for r in rows]), 2) if rows else 0
        await message.answer(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {count} –æ—Ç–∑—ã–≤(–æ–≤). –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg}")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

@router.callback_query(F.data.startswith("rate:"))
async def cb_rate(call: CallbackQuery, state: FSMContext):
    if not await state.get_state():
        await state.set_state(FeedbackSG.waiting_rating)
    try:
        rating = int(call.data.split(":")[1])
    except Exception:
        await call.answer("–û—à–∏–±–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True)
        return

    await state.update_data(rating=rating)
    await call.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: <b>{rating} ‚≠êÔ∏è</b>\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/—á—Ç–æ —É–ª—É—á—à–∏—Ç—å).",
    )
    await call.message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=skip_comment_kb())
    await state.set_state(FeedbackSG.waiting_comment)
    await call.answer()

@router.callback_query(F.data == "skip_comment")
async def cb_skip_comment(call: CallbackQuery, state: FSMContext):
    await process_feedback_and_finish(call.message, state, comment="")
    await call.answer()

@router.message(FeedbackSG.waiting_comment)
async def got_comment(message: Message, state: FSMContext):
    comment = (message.text or "").strip()
    await process_feedback_and_finish(message, state, comment=comment)

async def process_feedback_and_finish(message_or_callmsg: Message, state: FSMContext, comment: str):
    data = await state.get_data()
    rating = data.get("rating")
    if rating is None:
        await message_or_callmsg.answer("–ü–æ—Ö–æ–∂–µ, –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —ç—Ç–∞–ø —Å –æ—Ü–µ–Ω–∫–æ–π. –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.")
        return

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo_code = gen_promo_code()
    expires_at = datetime.utcnow() + timedelta(days=PROMO_VALID_DAYS)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    from db import get_conn
    with get_conn(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO feedback (user_id, username, rating, comment, promo_code, expires_at) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (
                message_or_callmsg.from_user.id,
                message_or_callmsg.from_user.username,
                rating,
                comment,
                promo_code,
                expires_at.strftime("%Y-%m-%d"),
            )
        )
        conn.commit()

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    await send_manager_card(message_or_callmsg, rating, comment, promo_code, expires_at)

    # –æ—Ç–≤–µ—á–∞–µ–º –≥–æ—Å—Ç—é
    await message_or_callmsg.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üíö\n"
        f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n"
        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: <b>{expires_at.strftime('%Y-%m-%d')}</b>\n\n"
        "–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤–∞—à–µ–º—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏."
    )

    await state.clear()

async def on_startup():
    init_db(DB_PATH)

async def main():
    await on_startup()
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
